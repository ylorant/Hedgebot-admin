<?php
namespace App\Command;

use Exception;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Yaml\Yaml;
use App\Service\ApiClientService;
use App\Exception\RPCException;

class SetupCommand extends Command
{
    const REQUIRED_EXTENSIONS = ["pdo_sqlite"];
    const ENV_FILE = '.env';
    const ENV_LOCAL_FILE = '.env.local';

    protected function configure()
    {
        $this
            ->setName('setup')
            ->setDescription('Sets up the public admin.')
            ->setHelp('Use this command to create the base setup for Hedgebot\'s public admin.');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return false|void
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output): bool
    {
        /** @var Kernel $kernel */
        $kernel = $this->getContainer()->get('kernel');
        $envFilePath = $kernel->getProjectDir() . DIRECTORY_SEPARATOR . self::ENV_FILE;

        $output->writeln([
            "Hedgebot admin panel setup",
            "==========================",
            "",
            "Welcome to the Hedgebot admin panel setup. Here you'll be configuring basic parameters",
            "for the panel.",
            "Just answer the few questions that'll be asked next and everything will be alright.",
            "Note: for some questions, there will be a value specified in parentheses. If you do not answer",
            "anything for the question, then this value will be used.",
            ""
        ]);


        $output->write("Checking extensions...");
        foreach (self::REQUIRED_EXTENSIONS as $extension) {
            if (!extension_loaded($extension)) {
                return $this->error($input, $output, "Extension ". $extension. " isn't loaded.");
            }
        }

        $output->writeln(["OK", ""]);

        // Ask for basic configuration settings
        $dbLocation = $this->askForDBLocation($input, $output);
        $botSettings = $this->askForBotSettings($input, $output);

        $output->writeln(["", "That's all we need to set. Let's set everything up!", ""]);

        // Generating parameters.yaml from the dist
        $output->write('Generating environment file...');

        $settings = Yaml::parse(file_get_contents($envFilePath));

        $settings['parameters']['database_path'] = $dbLocation;
        $settings['parameters']['secret'] = sha1(random_bytes(32));
        $settings['parameters']['hedgebot_api_uri'] = 'http://'. $botSettings['uri'];
        $settings['parameters']['hedgebot_api_token'] = $botSettings['token'];

        // Writing the final config file from that
        $parametersYaml = "# Parameters automatically generated by setup command". PHP_EOL;
        $parametersYaml .= Yaml::dump($settings);
        file_put_contents($envFilePath, $parametersYaml);

        // Writing the bot's interface extended configuration file
        $defaultBaseConfig = ["modules" => [], "settings" => []];
        $defaultBaseConfigYaml = Yaml::dump($defaultBaseConfig);
        file_put_contents($kernel->getProjectDir(). '/config/hedgebot.yaml', $defaultBaseConfigYaml);

        // Flushing cache
        $output->writeln("OK");
        $output->write("Flushing cache...");

        $command = $this->getApplication()->find('cache:clear');
        $command->run(new ArrayInput(['command' => 'cache:clear', '--env' => 'prod']), new NullOutput());

        $output->writeln(["OK", ""]);

        $output->writeln([
            "Now, you're almost ready to go. One last step is to create the first user account.",
            "To do that, just use the following command:",
            "", "php bin/console user:create", "",
            "You will be able to use this command in the future each time you want to create an user."
        ]);
    }

    protected function askForDBLocation(InputInterface $input, OutputInterface $output)
    {
        $helper = $this->getHelper('question');
        /** @var Kernel $kernel */
        $kernel = $this->getContainer()->get('kernel');

        // Creating questions
        $dbLocQuestion = new Question("Database file location (database.sq3): ", "database.sq3");
        $dbExistsQuestion = new ConfirmationQuestion("This file already exists. Do you want to erase it ? (n) ", false);
        $dbDirectoryQuestion = new ConfirmationQuestion("Directory doesn't exist. Create it ? (y) ", true);

        $output->writeln([
            "The first step will be to configure where the database file will be stored.",
            "If you do not specify an absolute path for the file, then it will be taken from the ",
            "base var directory (var/).",
            ""
        ]);

        // Loop until a valid database file is set
        while (true) {
            $dbLocation = $helper->ask($input, $output, $dbLocQuestion);
            $dbTestLocation = null;

            // Set the basedir for the location if it isn't an absolute location
            if ((PHP_OS == 'WINNT' && !preg_match('#^[a-zA-Z]:\\\\#', $dbLocation)) || $dbLocation[0] != '/') {
                $dbTestLocation = $kernel->getProjectDir() .
                    DIRECTORY_SEPARATOR . 'var' . DIRECTORY_SEPARATOR. $dbLocation;
                $dbLocation = $kernel->getProjectDir() .
                    DIRECTORY_SEPARATOR . 'var' . DIRECTORY_SEPARATOR . $dbLocation;
            } else {
                $dbTestLocation = $dbLocation;
            }

            // Check if file exists
            if (file_exists($dbTestLocation)) {
                // Ask if the user want to erase the db file, and go back to asking a new location if not
                $eraseDb = $helper->ask($input, $output, $dbExistsQuestion);

                if (!$eraseDb) {
                    continue;
                }
            }

            // Check if directory for the entered file exists, and ask to create it if needed
            $enteredDir = pathinfo($dbTestLocation, PATHINFO_DIRNAME);
            if (!is_dir($enteredDir)) {
                $createDirectory = $helper->ask($input, $output, $dbDirectoryQuestion);

                if (!$createDirectory) {
                    continue;
                }

                mkdir($enteredDir, 0777, true);
            }

            $output->writeln("");

            return $dbLocation;
        }
    }

    protected function askForBotSettings(InputInterface $input, OutputInterface $output)
    {
        $helper = $this->getHelper('question');

        // Creating questions
        $botAddressQuestion = new Question("Bot access address and port (127.0.0.1:8081): ", "127.0.0.1:8081");
        $hasTokenQuestion = new ConfirmationQuestion("Is the bot access protected by a token ? (y) ", true);
        $botTokenQuestion = new Question("Bot access token: ", null);

        $output->writeln([
            "Now, it's time to configure how the admin panel will connect to the bot.",
            "If you've installed the bot on the same machine and you're not sure what to set,",
            "refer to the documentation.",
            "A test will be done to check that the bot responds with the given settings.",
            "Ensure that the bot is started before validating settings."
        ]);

        $tries = 0;
        while ($tries < 5) {
            $output->writeln("");

            // Ask credentials
            $botAddress = $helper->ask($input, $output, $botAddressQuestion);
            $botToken = null;

            // Remove http URN
            if (substr($botAddress, 0, 7) == "http://") {
                $botAddress = substr($botAddress, 7);
            }

            if ($helper->ask($input, $output, $hasTokenQuestion)) {
                $botToken = $helper->ask($input, $output, $botTokenQuestion);
            }

            // Test bot connection
            $output->writeln("");
            $output->write("Testing bot connection...");

            try {
                $apiService = new ApiClientService($botAddress, $botToken);
                $endpoint = $apiService->endpoint("/");
                $pingResult = $endpoint->ping();

                if ($pingResult) {
                    $output->writeln("OK");
                    break;
                }
            } catch (RPCException $e) {
                $tries++;
                $this->error($input, $output, $e->getMessage());
                continue;
            }
        }

        $output->write("");

        return [
            "uri" => $botAddress,
            "token" => $botToken
        ];
    }

    /**
     * Helper function to show errors.
     * @param string $message The message to show.
     * @return false, to allow sequence breaking of calling method.
     */
    protected function error(InputInterface $input, OutputInterface $output, $message)
    {
        $output->writeln([
            "ERROR",
            "",
            $message
        ]);

        return false;
    }
}
